name: Build & Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    
      # 1) 코드 체크아웃 
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) JDK 21 설정  
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with: 
          distribution: 'temurin'
          java-version: '21'

      # 3) Gradle 캐시 (선택 사항) 
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 4) Gradle로 빌드
      - name: Build with Gradle
        working-directory: backend
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test --no-daemon

      # 5) 아티팩트 준비
      - name: Prepare artifact
        run: |
          JAR_FILE=$(find backend/build/libs -type f -name "*.jar" | head -n 1)
          cp "$JAR_FILE" PREINTER.jar
          

      # 6) SSH 에이전트 활성화 및 키 등록
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      # # testtest
      # - name: Verbose SSH connectivity test
      #   run: |
      #     echo "=== SSH -vvv 시작 ==="
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./deploy_key
      #     chmod 600 ./deploy_key
          
      #     ssh -i ./deploy_key \
      #       -o StrictHostKeyChecking=no \
      #       -vvv \
      #       deploy@${{ secrets.EC2_HOST }} \
      #       whoami
        
      # 7) EC2로 JAR 파일 전송
      - name: Copy artifact to EC2
        run: scp -o StrictHostKeyChecking=no PREINTER.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/PREINTER/

      # 8) EC2에서 서비스 재시작
      - name: Restart service on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo systemctl restart preinter.service
            sudo systemctl status preinter.service --no-pager
          EOF
